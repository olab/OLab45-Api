{
	"info": {
		"_postman_id": "928d4691-d414-4b6f-87e0-453961715fb2",
		"name": "OLab4 Unit Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "1460452"
	},
	"item": [
		{
			"name": "Startup",
			"item": [
				{
					"name": "Health",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disabledSystemHeaders": {}
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/Health",
							"host": [
								"{{url}}"
							],
							"path": [
								"Health"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"jwt_token\", jsonData.data.authInfo.token);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"jsonData.data.createdAt = null;\r",
									"jsonData.data.authInfo.token = null;\r",
									"jsonData.data.authInfo.expires = null;\r",
									"jsonData.data.authInfo.created = null;\r",
									"\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(pm.globals.get(\"expectedJson\")) );\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"createdAt\": null,\r",
									"        \"userName\": \"olab4s\",\r",
									"        \"role\": \"olabsuperuser\",\r",
									"        \"authInfo\": {\r",
									"            \"token\": null,\r",
									"            \"refresh\": null,\r",
									"            \"expires\": null,\r",
									"            \"isExpired\": false,\r",
									"            \"created\": null,\r",
									"            \"revoked\": null,\r",
									"            \"isActive\": true\r",
									"        },\r",
									"        \"courseName\": null\r",
									"    }\r",
									"};\r",
									"pm.globals.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-",
								"value": "application/json;charset=UTF-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserName\": \"{{user}}\",\r\n    \"Password\": \"{{password}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Import OLab4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"postman.setEnvironmentVariable(\"mapId\", jsonData.data.mapId);\r",
									"\r",
									"let count = jsonData.data.logMessages.length;\r",
									"console.log(count);\r",
									"\r",
									"tests[\"# messages is correct\"] = ( count === 149 );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-",
								"value": "application/json;charset=UTF-8",
								"type": "text",
								"disabled": true
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1eed0c6b-354d-4f90-bade-99573491993d"
								}
							]
						},
						"url": {
							"raw": "{{url}}/import4",
							"host": [
								"{{url}}"
							],
							"path": [
								"import4"
							]
						}
					},
					"response": []
				},
				{
					"name": "ExportAsJson",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.get(\"functions\", functions);\r",
									"\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"var actualData = pm.response.json();\r",
									"var actualMapData = actualData.data.mapDetails;\r",
									"var actualMapLength = JSON.stringify(actualMapData).length;\r",
									"\r",
									"var expectedMapData = pm.environment.get(\"expectedMapData\");\r",
									"expectedMapData.id = Number(pm.environment.get(\"mapId\"));\r",
									"var expectedMapLength = JSON.stringify(expectedMapData).length;\r",
									"\r",
									"tests[\"map size correct\"] = ( expectedMapLength == actualMapLength );\r",
									"tests[\"mapDetails are correct\"] = functions.compare(expectedMapData, actualMapData );\r",
									"\r",
									"var expectedNodeData = {\r",
									"                \"isEnd\": false,\r",
									"                \"kfp\": null,\r",
									"                \"probability\": null,\r",
									"                \"undo\": null,\r",
									"                \"createdAt\": null,\r",
									"                \"updatedAt\": null,\r",
									"                \"x\": 1332.8514404296875,\r",
									"                \"y\": -1372.2801513671875,\r",
									"                \"isPrivate\": 0,\r",
									"                \"collapsed\": 0,\r",
									"                \"forceReload\": 0,\r",
									"                \"height\": 160,\r",
									"                \"linkTypeId\": 2,\r",
									"                \"locked\": 0,\r",
									"                \"priorityId\": 1,\r",
									"                \"typeId\": 1,\r",
									"                \"visitOnce\": 0,\r",
									"                \"width\": 300,\r",
									"                \"showInfo\": 0,\r",
									"                \"annotation\": \"<p><strong>Facilitator note</strong>: if you can see this panel, you are running in either Author or Reviewer mode. Users who are playing this case as Learners will <span style=\\\"text-decoration: underline;\\\">not</span> see the contents of these panels.??</p>\\n<p>We use these panels for notes for teachers and for collaborative authoring notes while building a case.??</p>\",\r",
									"                \"conditional\": null,\r",
									"                \"conditionalMessage\": null,\r",
									"                \"info\": \"<p>This is an InfoButton - it should display in a separate panel.??</p>\",\r",
									"                \"text\": \"<p>The primary purpose of this labyrinth is to test whether Duplicate/Export/Import works satisfacorily for advanced OLab4 cases.&nbsp;</p>\\n<p>This case has not been prettified at all. This is just for testing portability of advanced functionality in OLab4 cases.&nbsp;</p>\\n<p>Note that the Export/Import format being used here extends beyond what is permitted by the ANSI/Medbiq MVP standard.&nbsp;</p>\",\r",
									"                \"linkStyleId\": 5,\r",
									"                \"mapId\": null,\r",
									"                \"color\": \"#c1e1c5\",\r",
									"                \"scopedObjects\": {\r",
									"                    \"questions\": [],\r",
									"                    \"constants\": [],\r",
									"                    \"counters\": [],\r",
									"                    \"files\": [],\r",
									"                    \"scripts\": [],\r",
									"                    \"themes\": [],\r",
									"                    \"counteractions\": []\r",
									"                },\r",
									"                \"data\": null,\r",
									"                \"contextId\": null,\r",
									"                \"title\": \"Root Node\",\r",
									"                \"url\": null,\r",
									"                \"id\": null\r",
									"            };\r",
									"\r",
									"expectedNodeData.mapId = Number(pm.environment.get(\"mapId\"));\r",
									"actualData.data.nodes[0].id = null;\r",
									"\r",
									"tests[\"Nodes[0] is correct\"] = functions.compare(expectedNodeData, actualData.data.nodes[0] ); \r",
									"tests[\"# Nodes are correct\"] = ( actualData.data.nodes.length ===  27 );\r",
									"\r",
									"var expectedEdgeData =  {\r",
									"                \"id\": 121453,\r",
									"                \"sourceId\": 36337,\r",
									"                \"destinationId\": 36338,\r",
									"                \"color\": \"#566e94\",\r",
									"                \"reverseId\": null,\r",
									"                \"linkText\": \"\",\r",
									"                \"destinationTitle\": null,\r",
									"                \"linkStyleId\": null,\r",
									"                \"isHidden\": false\r",
									"            };\r",
									"\r",
									"expectedEdgeData.sourceId = null;\r",
									"actualData.data.edges[0].sourceId = null;\r",
									"expectedEdgeData.destinationId = null;\r",
									"actualData.data.edges[0].destinationId = null;\r",
									"\r",
									"tests[\"Edges[0] is correct\"] = functions.compare(expectedEdgeData, actualData.data.edges[0] );\r",
									"tests[`# Edges are correct ${actualData.data.edges.length} === 90`] = ( actualData.data.edges.length ===  90 );\r",
									"\r",
									"var expectedQuestionData = {\r",
									"                    \"stem\": \"Simple single line QUestion - alpha only\",\r",
									"                    \"width\": 0,\r",
									"                    \"height\": 0,\r",
									"                    \"settings\": \"WyIiLCIxIl0=\",\r",
									"                    \"feedback\": \"\",\r",
									"                    \"prompt\": \"type here???\",\r",
									"                    \"showAnswer\": true,\r",
									"                    \"showSubmit\": 0,\r",
									"                    \"layoutType\": 0,\r",
									"                    \"isPrivate\": 0,\r",
									"                    \"order\": 0,\r",
									"                    \"responses\": [],\r",
									"                    \"tryCount\": -1,\r",
									"                    \"numTries\": -1,\r",
									"                    \"disabled\": 0,\r",
									"                    \"wiki\": \"[[QU:QUESTION3461]]\",\r",
									"                    \"value\": null,\r",
									"                    \"questionType\": 1,\r",
									"                    \"id\": null,\r",
									"                    \"name\": \"QUESTION3461\",\r",
									"                    \"description\": null,\r",
									"                    \"parentId\": null,\r",
									"                    \"scopeLevel\": \"Maps\",\r",
									"                    \"createdat\": \"2019-09-19T09:32:06\",\r",
									"                    \"updatedat\": \"2023-11-19T01:50:15\",\r",
									"                    \"scopeLevelObj\": {\r",
									"                        \"id\": 0,\r",
									"                        \"name\": null\r",
									"                    }\r",
									"                };\r",
									"\r",
									"expectedQuestionData.wiki = null;\r",
									"actualData.data.scopedObjects.questions[0].wiki = null;\r",
									"expectedNodeData.parentId = Number(pm.environment.get(\"mapId\"));\r",
									"\r",
									"tests[\"Question[0] is correct\"] = functions.compare(expectedQuestionData, actualData.data.scopedObjects.questions[0] );\r",
									"tests[\"# Question are correct\"] = ( actualData.data.scopedObjects.questions.length === 6 );\r",
									"\r",
									"var expectedQuestionResponseData = {\r",
									"    \"response\": \"pick 1\",\r",
									"    \"feedback\": \"yup\",\r",
									"    \"isCorrect\": 1,\r",
									"    \"score\": 0,\r",
									"    \"from\": \"\",\r",
									"    \"to\": \"\",\r",
									"    \"order\": 1,\r",
									"    \"questionId\": 5360,\r",
									"    \"value\": null,\r",
									"    \"id\": 26570,\r",
									"    \"name\": null,\r",
									"    \"description\": null,\r",
									"    \"parentId\": 0,\r",
									"    \"scopeLevel\": null,\r",
									"    \"createdat\": \"2019-09-19T09:32:06\",\r",
									"    \"updatedat\": \"2023-11-19T01:53:30\",\r",
									"    \"scopeLevelObj\": {\r",
									"        \"id\": 0,\r",
									"        \"name\": null\r",
									"    }\r",
									"};\r",
									"\r",
									"expectedQuestionResponseData.questionId = null;\r",
									"actualData.data.scopedObjects.questions[3].responses[0].questionId = null;\r",
									"actualData.data.scopedObjects.questions[3].responses[0].value = null;\r",
									"\r",
									"tests[\"Response[0] is correct\"] = functions.compare(expectedQuestionResponseData, actualData.data.scopedObjects.questions[3].responses[0] );\r",
									"tests[\"# Responses are correct\"] = ( actualData.data.scopedObjects.questions[3].responses.length === 3 );\r",
									"\r",
									"var expectedConstantData =  [];\r",
									"\r",
									"tests[\"# Constants[0] is correct\"] = functions.compare(expectedConstantData, actualData.data.scopedObjects.constants );\r",
									"tests[\"# Constants are correct\"] = ( actualData.data.scopedObjects.constants.length ===  0 );\r",
									"\r",
									"var expectedCounterData = {\r",
									"                    \"value\": \"\",\r",
									"                    \"isSystem\": 0,\r",
									"                    \"id\": 1779,\r",
									"                    \"name\": \"Score int\",\r",
									"                    \"description\": \"U2ltcGxlIGludGVnZXIgc2NvcmU=\",\r",
									"                    \"parentId\": 1944,\r",
									"                    \"scopeLevel\": \"Maps\",\r",
									"                    \"createdat\": \"2019-09-19T09:32:06\",\r",
									"                    \"updatedat\": \"2019-09-19T09:32:06\",\r",
									"                    \"scopeLevelObj\": {\r",
									"                        \"id\": 0,\r",
									"                        \"name\": null\r",
									"                    }\r",
									"                };\r",
									"\r",
									"expectedCounterData.parentId = null;\r",
									"actualData.data.scopedObjects.counters[0].parentId = null;\r",
									"\r",
									"tests[\"Counters[0] is  correct\"] = functions.compare(expectedCounterData, actualData.data.scopedObjects.counters[0] ); \r",
									"tests[\"# Counters are correct\"] = ( actualData.data.scopedObjects.counters.length === 3 );\r",
									"\r",
									"var expectedFileData = {\r",
									"                    \"fileSize\": 25280,\r",
									"                    \"height\": null,\r",
									"                    \"isSystem\": 0,\r",
									"                    \"type\": null,\r",
									"                    \"width\": null,\r",
									"                    \"isPrivate\": 0,\r",
									"                    \"isShared\": 1,\r",
									"                    \"isEmbedded\": null,\r",
									"                    \"args\": null,\r",
									"                    \"copyright\": \"\",\r",
									"                    \"fileName\": \"RonAvatar.png\",\r",
									"                    \"hAlign\": null,\r",
									"                    \"heightType\": \"px\",\r",
									"                    \"mime\": \"image/png\",\r",
									"                    \"originUrl\": null,\r",
									"                    \"path\": \"RonAvatar.png\",\r",
									"                    \"vAlign\": null,\r",
									"                    \"widthType\": \"px\",\r",
									"                    \"selectedFileName\": null,\r",
									"                    \"isMediaResource\": true,\r",
									"                    \"url\": null,\r",
									"                    \"id\": 2981,\r",
									"                    \"name\": \"Test image of Ron's avatar\",\r",
									"                    \"description\": \"Borrowed from Ron TT case for PNG as attached file\",\r",
									"                    \"parentId\": 1944,\r",
									"                    \"scopeLevel\": \"Maps\",\r",
									"                    \"createdat\": \"2023-11-19T17:44:47\",\r",
									"                    \"updatedat\": null,\r",
									"                    \"scopeLevelObj\": {\r",
									"                        \"id\": 0,\r",
									"                        \"name\": null\r",
									"                    }\r",
									"                };\r",
									"\r",
									"tests[\"Files[0] is  correct\"] = functions.compare(expectedFileData, actualData.data.scopedObjects.files[0] );\r",
									"tests[\"# Files are correct\"] = ( actualData.data.scopedObjects.files.length ===  12 );\r",
									"\r",
									"var expectedThemeData =  [];\r",
									"\r",
									"tests[\"# Theme[0] is correct\"] = functions.compare(expectedThemeData, actualData.data.scopedObjects.themes );\r",
									"tests[\"# Themes are correct\"] = ( actualData.data.scopedObjects.themes.length ===  0 );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedMapDetailsJson = {\r",
									"            \"enabled\": true,\r",
									"            \"revisableAnswers\": false,\r",
									"            \"sendXapiStatements\": false,\r",
									"            \"showBar\": false,\r",
									"            \"showScore\": false,\r",
									"            \"timing\": false,\r",
									"            \"createdAt\": null,\r",
									"            \"updatedAt\": null,\r",
									"            \"rendererVersion\": null,\r",
									"            \"authorRights\": 0,\r",
									"            \"deltaTime\": 0,\r",
									"            \"reminderTime\": 0,\r",
									"            \"startScore\": 0,\r",
									"            \"threshold\": 0,\r",
									"            \"assignForumId\": null,\r",
									"            \"isTemplate\": 0,\r",
									"            \"abstract\": \"<p>This map contains an example of all the features in a labyrinth in OLab v4.6. Created to test out the <strong>Duplicate</strong> function or advanced <strong>Export</strong>.&nbsp;Note that the Export/Import format being used here extends beyond what is permitted by the ANSI/Medbiq MVP standard.&nbsp;</p>\\n<p>See Author notes about what needs to be included, that was not included in 'Export testing 2'. Has been updated since some of the duplicates were made. Some items in this map are intended to illustrate what is known to survive an Export and what is known to be lost. e.g. Embedded Relative Links (see [Internally referenced node]) and <strong>Imagemaps</strong>.&nbsp;</p>\\n<p>&nbsp;</p>\",\r",
									"            \"author\": null,\r",
									"            \"devNotes\": \"<p>**Authoring notes do not Import properly. They were Base64 encoded I think. They should have said this&hellip;</p>\\n<p>Has one of everything that we want to Export/Import between OLab3 servers. This exceeds what can be covered in the ANSI/MVP format.&nbsp;</p>\\n<p>Check to see if all the internal and external refs work properly.&nbsp;Has been updated since some of the duplicates were made so some of them will not be identical.&nbsp;</p>\",\r",
									"            \"feedback\": \"VGhpcyBpcyBnZW5lcmFsIGZlZWRiYWNrIGdpdmVuIHRvIGV2ZXJ5b25l\",\r",
									"            \"guid\": \"\",\r",
									"            \"keywords\": \"test\",\r",
									"            \"reminderMsg\": \"empty_reminder_msg\",\r",
									"            \"source\": \"\",\r",
									"            \"title\": null,\r",
									"            \"units\": \"\",\r",
									"            \"verification\": null,\r",
									"            \"sectionId\": 3,\r",
									"            \"securityId\": 3,\r",
									"            \"skinId\": 0,\r",
									"            \"sourceId\": 0,\r",
									"            \"typeId\": 5,\r",
									"            \"languageId\": 1,\r",
									"            \"reportNodeId\": null,\r",
									"            \"id\": 1944,\r",
									"            \"name\": \"IMPORT: Test: Duplicate and advanced export testing\",\r",
									"            \"description\": \"<p>This map contains an example of all the features in a labyrinth in OLab v4.6. Created to test out the <strong>Duplicate</strong> function or advanced <strong>Export</strong>.&nbsp;Note that the Export/Import format being used here extends beyond what is permitted by the ANSI/Medbiq MVP standard.&nbsp;</p>\\n<p>See Author notes about what needs to be included, that was not included in 'Export testing 2'. Has been updated since some of the duplicates were made. Some items in this map are intended to illustrate what is known to survive an Export and what is known to be lost. e.g. Embedded Relative Links (see [Internally referenced node]) and <strong>Imagemaps</strong>.&nbsp;</p>\\n<p>&nbsp;</p>\",\r",
									"            \"url\": null\r",
									"        };\r",
									"\r",
									"pm.environment.set(\"expectedMapData\", expectedMapDetailsJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/import4/export/{{mapId}}/json",
							"host": [
								"{{url}}"
							],
							"path": [
								"import4",
								"export",
								"{{mapId}}",
								"json"
							]
						}
					},
					"response": []
				},
				{
					"name": "Export",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.environment.get(\"functions\", functions);\r",
									"\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"var actualData = pm.response.json();\r",
									"var actualMapData = actualData.data.mapDetails;\r",
									"var actualMapLength = JSON.stringify(actualMapData).length;\r",
									"\r",
									"var expectedMapData = pm.environment.get(\"expectedMapData\");\r",
									"expectedMapData.id = Number(pm.environment.get(\"mapId\"));\r",
									"var expectedMapLength = JSON.stringify(expectedMapData).length;\r",
									"\r",
									"tests[\"map size correct\"] = ( expectedMapLength == actualMapLength );\r",
									"tests[\"mapDetails are correct\"] = functions.compare(expectedMapData, actualMapData );\r",
									"\r",
									"var expectedNodeData = {\r",
									"                \"isEnd\": false,\r",
									"                \"kfp\": null,\r",
									"                \"probability\": null,\r",
									"                \"undo\": null,\r",
									"                \"createdAt\": null,\r",
									"                \"updatedAt\": null,\r",
									"                \"x\": 1332.8514404296875,\r",
									"                \"y\": -1372.2801513671875,\r",
									"                \"isPrivate\": 0,\r",
									"                \"collapsed\": 0,\r",
									"                \"forceReload\": 0,\r",
									"                \"height\": 160,\r",
									"                \"linkTypeId\": 2,\r",
									"                \"locked\": 0,\r",
									"                \"priorityId\": 1,\r",
									"                \"typeId\": 1,\r",
									"                \"visitOnce\": 0,\r",
									"                \"width\": 300,\r",
									"                \"showInfo\": 0,\r",
									"                \"annotation\": \"<p><strong>Facilitator note</strong>: if you can see this panel, you are running in either Author or Reviewer mode. Users who are playing this case as Learners will <span style=\\\"text-decoration: underline;\\\">not</span> see the contents of these panels.??</p>\\n<p>We use these panels for notes for teachers and for collaborative authoring notes while building a case.??</p>\",\r",
									"                \"conditional\": null,\r",
									"                \"conditionalMessage\": null,\r",
									"                \"info\": \"<p>This is an InfoButton - it should display in a separate panel.??</p>\",\r",
									"                \"text\": \"<p>The primary purpose of this labyrinth is to test whether Duplicate/Export/Import works satisfacorily for advanced OLab4 cases.&nbsp;</p>\\n<p>This case has not been prettified at all. This is just for testing portability of advanced functionality in OLab4 cases.&nbsp;</p>\\n<p>Note that the Export/Import format being used here extends beyond what is permitted by the ANSI/Medbiq MVP standard.&nbsp;</p>\",\r",
									"                \"linkStyleId\": 5,\r",
									"                \"mapId\": null,\r",
									"                \"color\": \"#c1e1c5\",\r",
									"                \"scopedObjects\": {\r",
									"                    \"questions\": [],\r",
									"                    \"constants\": [],\r",
									"                    \"counters\": [],\r",
									"                    \"files\": [],\r",
									"                    \"scripts\": [],\r",
									"                    \"themes\": [],\r",
									"                    \"counteractions\": []\r",
									"                },\r",
									"                \"data\": null,\r",
									"                \"contextId\": null,\r",
									"                \"title\": \"Root Node\",\r",
									"                \"url\": null,\r",
									"                \"id\": null\r",
									"            };\r",
									"\r",
									"expectedNodeData.mapId = Number(pm.environment.get(\"mapId\"));\r",
									"actualData.data.nodes[0].id = null;\r",
									"\r",
									"tests[\"Nodes[0] is correct\"] = functions.compare(expectedNodeData, actualData.data.nodes[0] ); \r",
									"tests[\"# Nodes are correct\"] = ( actualData.data.nodes.length ===  27 );\r",
									"\r",
									"var expectedEdgeData =  {\r",
									"                \"id\": 121453,\r",
									"                \"sourceId\": 36337,\r",
									"                \"destinationId\": 36338,\r",
									"                \"color\": \"#566e94\",\r",
									"                \"reverseId\": null,\r",
									"                \"linkText\": \"\",\r",
									"                \"destinationTitle\": null,\r",
									"                \"linkStyleId\": null,\r",
									"                \"isHidden\": false\r",
									"            };\r",
									"\r",
									"expectedEdgeData.sourceId = null;\r",
									"actualData.data.edges[0].sourceId = null;\r",
									"expectedEdgeData.destinationId = null;\r",
									"actualData.data.edges[0].destinationId = null;\r",
									"\r",
									"tests[\"Edges[0] is correct\"] = functions.compare(expectedEdgeData, actualData.data.edges[0] );\r",
									"tests[`# Edges are correct ${actualData.data.edges.length} === 90`] = ( actualData.data.edges.length ===  90 );\r",
									"\r",
									"var expectedQuestionData = {\r",
									"                    \"stem\": \"Simple single line QUestion - alpha only\",\r",
									"                    \"width\": 0,\r",
									"                    \"height\": 0,\r",
									"                    \"settings\": \"WyIiLCIxIl0=\",\r",
									"                    \"feedback\": \"\",\r",
									"                    \"prompt\": \"type here???\",\r",
									"                    \"showAnswer\": true,\r",
									"                    \"showSubmit\": 0,\r",
									"                    \"layoutType\": 0,\r",
									"                    \"isPrivate\": 0,\r",
									"                    \"order\": 0,\r",
									"                    \"responses\": [],\r",
									"                    \"tryCount\": -1,\r",
									"                    \"numTries\": -1,\r",
									"                    \"disabled\": 0,\r",
									"                    \"wiki\": \"[[QU:QUESTION3461]]\",\r",
									"                    \"value\": null,\r",
									"                    \"questionType\": 1,\r",
									"                    \"id\": null,\r",
									"                    \"name\": \"QUESTION3461\",\r",
									"                    \"description\": null,\r",
									"                    \"parentId\": null,\r",
									"                    \"scopeLevel\": \"Maps\",\r",
									"                    \"createdat\": \"2019-09-19T09:32:06\",\r",
									"                    \"updatedat\": \"2023-11-19T01:50:15\",\r",
									"                    \"scopeLevelObj\": {\r",
									"                        \"id\": 0,\r",
									"                        \"name\": null\r",
									"                    }\r",
									"                };\r",
									"\r",
									"expectedQuestionData.wiki = null;\r",
									"actualData.data.scopedObjects.questions[0].wiki = null;\r",
									"expectedNodeData.parentId = Number(pm.environment.get(\"mapId\"));\r",
									"\r",
									"tests[\"Question[0] is correct\"] = functions.compare(expectedQuestionData, actualData.data.scopedObjects.questions[0] );\r",
									"tests[\"# Question are correct\"] = ( actualData.data.scopedObjects.questions.length === 6 );\r",
									"\r",
									"var expectedQuestionResponseData = {\r",
									"    \"response\": \"pick 1\",\r",
									"    \"feedback\": \"yup\",\r",
									"    \"isCorrect\": 1,\r",
									"    \"score\": 0,\r",
									"    \"from\": \"\",\r",
									"    \"to\": \"\",\r",
									"    \"order\": 1,\r",
									"    \"questionId\": 5360,\r",
									"    \"value\": null,\r",
									"    \"id\": 26570,\r",
									"    \"name\": null,\r",
									"    \"description\": null,\r",
									"    \"parentId\": 0,\r",
									"    \"scopeLevel\": null,\r",
									"    \"createdat\": \"2019-09-19T09:32:06\",\r",
									"    \"updatedat\": \"2023-11-19T01:53:30\",\r",
									"    \"scopeLevelObj\": {\r",
									"        \"id\": 0,\r",
									"        \"name\": null\r",
									"    }\r",
									"};\r",
									"\r",
									"expectedQuestionResponseData.questionId = null;\r",
									"actualData.data.scopedObjects.questions[3].responses[0].questionId = null;\r",
									"actualData.data.scopedObjects.questions[3].responses[0].value = null;\r",
									"\r",
									"tests[\"Response[0] is correct\"] = functions.compare(expectedQuestionResponseData, actualData.data.scopedObjects.questions[3].responses[0] );\r",
									"tests[\"# Responses are correct\"] = ( actualData.data.scopedObjects.questions[3].responses.length === 3 );\r",
									"\r",
									"var expectedConstantData =  [];\r",
									"\r",
									"tests[\"# Constants[0] is correct\"] = functions.compare(expectedConstantData, actualData.data.scopedObjects.constants );\r",
									"tests[\"# Constants are correct\"] = ( actualData.data.scopedObjects.constants.length ===  0 );\r",
									"\r",
									"var expectedCounterData = {\r",
									"                    \"value\": \"\",\r",
									"                    \"isSystem\": 0,\r",
									"                    \"id\": 1779,\r",
									"                    \"name\": \"Score int\",\r",
									"                    \"description\": \"U2ltcGxlIGludGVnZXIgc2NvcmU=\",\r",
									"                    \"parentId\": 1944,\r",
									"                    \"scopeLevel\": \"Maps\",\r",
									"                    \"createdat\": \"2019-09-19T09:32:06\",\r",
									"                    \"updatedat\": \"2019-09-19T09:32:06\",\r",
									"                    \"scopeLevelObj\": {\r",
									"                        \"id\": 0,\r",
									"                        \"name\": null\r",
									"                    }\r",
									"                };\r",
									"\r",
									"expectedCounterData.parentId = null;\r",
									"actualData.data.scopedObjects.counters[0].parentId = null;\r",
									"\r",
									"tests[\"Counters[0] is  correct\"] = functions.compare(expectedCounterData, actualData.data.scopedObjects.counters[0] ); \r",
									"tests[\"# Counters are correct\"] = ( actualData.data.scopedObjects.counters.length === 3 );\r",
									"\r",
									"var expectedFileData = {\r",
									"                    \"fileSize\": 25280,\r",
									"                    \"height\": null,\r",
									"                    \"isSystem\": 0,\r",
									"                    \"type\": null,\r",
									"                    \"width\": null,\r",
									"                    \"isPrivate\": 0,\r",
									"                    \"isShared\": 1,\r",
									"                    \"isEmbedded\": null,\r",
									"                    \"args\": null,\r",
									"                    \"copyright\": \"\",\r",
									"                    \"fileName\": \"RonAvatar.png\",\r",
									"                    \"hAlign\": null,\r",
									"                    \"heightType\": \"px\",\r",
									"                    \"mime\": \"image/png\",\r",
									"                    \"originUrl\": null,\r",
									"                    \"path\": \"RonAvatar.png\",\r",
									"                    \"vAlign\": null,\r",
									"                    \"widthType\": \"px\",\r",
									"                    \"selectedFileName\": null,\r",
									"                    \"isMediaResource\": true,\r",
									"                    \"url\": null,\r",
									"                    \"id\": 2981,\r",
									"                    \"name\": \"Test image of Ron's avatar\",\r",
									"                    \"description\": \"Borrowed from Ron TT case for PNG as attached file\",\r",
									"                    \"parentId\": 1944,\r",
									"                    \"scopeLevel\": \"Maps\",\r",
									"                    \"createdat\": \"2023-11-19T17:44:47\",\r",
									"                    \"updatedat\": null,\r",
									"                    \"scopeLevelObj\": {\r",
									"                        \"id\": 0,\r",
									"                        \"name\": null\r",
									"                    }\r",
									"                };\r",
									"\r",
									"tests[\"Files[0] is  correct\"] = functions.compare(expectedFileData, actualData.data.scopedObjects.files[0] );\r",
									"tests[\"# Files are correct\"] = ( actualData.data.scopedObjects.files.length ===  12 );\r",
									"\r",
									"var expectedThemeData =  [];\r",
									"\r",
									"tests[\"# Theme[0] is correct\"] = functions.compare(expectedThemeData, actualData.data.scopedObjects.themes );\r",
									"tests[\"# Themes are correct\"] = ( actualData.data.scopedObjects.themes.length ===  0 );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedMapDetailsJson = {\r",
									"            \"enabled\": true,\r",
									"            \"revisableAnswers\": false,\r",
									"            \"sendXapiStatements\": false,\r",
									"            \"showBar\": false,\r",
									"            \"showScore\": false,\r",
									"            \"timing\": false,\r",
									"            \"createdAt\": null,\r",
									"            \"updatedAt\": null,\r",
									"            \"rendererVersion\": null,\r",
									"            \"authorRights\": 0,\r",
									"            \"deltaTime\": 0,\r",
									"            \"reminderTime\": 0,\r",
									"            \"startScore\": 0,\r",
									"            \"threshold\": 0,\r",
									"            \"assignForumId\": null,\r",
									"            \"isTemplate\": 0,\r",
									"            \"abstract\": \"<p>This map contains an example of all the features in a labyrinth in OLab v4.6. Created to test out the <strong>Duplicate</strong> function or advanced <strong>Export</strong>.&nbsp;Note that the Export/Import format being used here extends beyond what is permitted by the ANSI/Medbiq MVP standard.&nbsp;</p>\\n<p>See Author notes about what needs to be included, that was not included in 'Export testing 2'. Has been updated since some of the duplicates were made. Some items in this map are intended to illustrate what is known to survive an Export and what is known to be lost. e.g. Embedded Relative Links (see [Internally referenced node]) and <strong>Imagemaps</strong>.&nbsp;</p>\\n<p>&nbsp;</p>\",\r",
									"            \"author\": null,\r",
									"            \"devNotes\": \"<p>**Authoring notes do not Import properly. They were Base64 encoded I think. They should have said this&hellip;</p>\\n<p>Has one of everything that we want to Export/Import between OLab3 servers. This exceeds what can be covered in the ANSI/MVP format.&nbsp;</p>\\n<p>Check to see if all the internal and external refs work properly.&nbsp;Has been updated since some of the duplicates were made so some of them will not be identical.&nbsp;</p>\",\r",
									"            \"feedback\": \"VGhpcyBpcyBnZW5lcmFsIGZlZWRiYWNrIGdpdmVuIHRvIGV2ZXJ5b25l\",\r",
									"            \"guid\": \"\",\r",
									"            \"keywords\": \"test\",\r",
									"            \"reminderMsg\": \"empty_reminder_msg\",\r",
									"            \"source\": \"\",\r",
									"            \"title\": null,\r",
									"            \"units\": \"\",\r",
									"            \"verification\": null,\r",
									"            \"sectionId\": 3,\r",
									"            \"securityId\": 3,\r",
									"            \"skinId\": 0,\r",
									"            \"sourceId\": 0,\r",
									"            \"typeId\": 5,\r",
									"            \"languageId\": 1,\r",
									"            \"reportNodeId\": null,\r",
									"            \"id\": 1944,\r",
									"            \"name\": \"IMPORT: Test: Duplicate and advanced export testing\",\r",
									"            \"description\": \"<p>This map contains an example of all the features in a labyrinth in OLab v4.6. Created to test out the <strong>Duplicate</strong> function or advanced <strong>Export</strong>.&nbsp;Note that the Export/Import format being used here extends beyond what is permitted by the ANSI/Medbiq MVP standard.&nbsp;</p>\\n<p>See Author notes about what needs to be included, that was not included in 'Export testing 2'. Has been updated since some of the duplicates were made. Some items in this map are intended to illustrate what is known to survive an Export and what is known to be lost. e.g. Embedded Relative Links (see [Internally referenced node]) and <strong>Imagemaps</strong>.&nbsp;</p>\\n<p>&nbsp;</p>\",\r",
									"            \"url\": null\r",
									"        };\r",
									"\r",
									"pm.environment.set(\"expectedMapData\", expectedMapDetailsJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/import4/export/{{mapId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"import4",
								"export",
								"{{mapId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Import OLab3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"postman.setEnvironmentVariable(\"mapId\", jsonData.data.mapId);\r",
									"\r",
									"tests[\"Have new mapId\"] = ( jsonData.data.mapId > 0 );\r",
									"tests[\"# log messages is correct\"] = ( jsonData.data.logMessages.length === 183 );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-",
								"value": "application/json;charset=UTF-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "postman-cloud:///1eed0c6b-c77b-4d90-8654-dd4283b85d54"
								}
							]
						},
						"url": {
							"raw": "{{url}}/import3",
							"host": [
								"{{url}}"
							],
							"path": [
								"import3"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Test User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"loginuser\", jsonData.data[0].username);\r",
									"postman.setEnvironmentVariable(\"loginpassword\", jsonData.data[0].password);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-",
								"value": "application/json;charset=UTF-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "[\r\n    {\r\n        \"UserName\": \"{{testuser}}\",\r\n        \"Email\": \"{{testemail}}\",\r\n        \"NickName\": \"{{testnickname}}\",\r\n        \"Role\": \"olabsuperuser\"\r\n    }\r\n]",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/adduser",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"adduser"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Test User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"jwt_token\", jsonData.data.authInfo.token);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"jsonData.data.createdAt = null;\r",
									"jsonData.data.authInfo.token = null;\r",
									"jsonData.data.authInfo.expires = null;\r",
									"jsonData.data.authInfo.created = null;\r",
									"\r",
									"var expectedJson = pm.globals.get(\"expectedJson\");\r",
									"expectedJson.data.userName =  pm.environment.get(\"loginuser\");\r",
									"\r",
									"tests[\"Body is correct\"] =  functions.compare(expectedJson, jsonData);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"createdAt\": null,\r",
									"        \"userName\": \"olab4s\",\r",
									"        \"role\": \"olabsuperuser\",\r",
									"        \"authInfo\": {\r",
									"            \"token\": null,\r",
									"            \"refresh\": null,\r",
									"            \"expires\": null,\r",
									"            \"isExpired\": false,\r",
									"            \"created\": null,\r",
									"            \"revoked\": null,\r",
									"            \"isActive\": true\r",
									"        },\r",
									"        \"courseName\": null\r",
									"    }\r",
									"};\r",
									"pm.globals.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-",
								"value": "application/json;charset=UTF-8",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"UserName\": \"{{loginuser}}\",\r\n    \"Password\": \"{{loginpassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/login",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Question",
			"item": [
				{
					"name": "Get Questions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"Count > 0\"] = jsonData.count === jsonData.data.length;\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"stem\": \"Unittesting case?\",\r",
									"        \"width\": 0,\r",
									"        \"height\": 0,\r",
									"        \"settings\": null,\r",
									"        \"feedback\": \"\",\r",
									"        \"prompt\": \"\",\r",
									"        \"showAnswer\": true,\r",
									"        \"showSubmit\": 1,\r",
									"        \"layoutType\": 0,\r",
									"        \"isPrivate\": 0,\r",
									"        \"order\": null,\r",
									"        \"responses\": [],\r",
									"        \"tryCount\": -1,\r",
									"        \"numTries\": -1,\r",
									"        \"disabled\": 0,\r",
									"        \"wiki\": null,\r",
									"        \"value\": null,\r",
									"        \"questionType\": 3,\r",
									"        \"id\": null,\r",
									"        \"name\": \"2912\",\r",
									"        \"description\": null,\r",
									"        \"parentId\": 1644,\r",
									"        \"scopeLevel\": \"Maps\",\r",
									"        \"createdat\": null,\r",
									"        \"updatedat\": null,\r",
									"        \"scopeLevelObj\": null\r",
									"    }\r",
									"};\r",
									"\r",
									"expectedJson.data.parentId = pm.environment.get(\"mapId\");\r",
									"\r",
									"pm.environment.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/questions",
							"host": [
								"{{url}}"
							],
							"path": [
								"questions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Question",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"pm.environment.set(\"newId\", jsonData.data.id);\r",
									"\r",
									"jsonData.data.createdat = null;\r",
									"jsonData.data.id = null;\r",
									"jsonData.data.wiki = null;\r",
									"jsonData.data.scopeLevelObj = null;\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"console.log(jsonData);\r",
									"console.log(expectedData);\r",
									"\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(expectedData) );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"stem\": \"Unittesting case?\",\r",
									"        \"width\": 0,\r",
									"        \"height\": 0,\r",
									"        \"settings\": null,\r",
									"        \"feedback\": \"\",\r",
									"        \"prompt\": \"\",\r",
									"        \"showAnswer\": true,\r",
									"        \"showSubmit\": 1,\r",
									"        \"layoutType\": 0,\r",
									"        \"isPrivate\": 0,\r",
									"        \"order\": null,\r",
									"        \"responses\": [],\r",
									"        \"tryCount\": -1,\r",
									"        \"numTries\": -1,\r",
									"        \"disabled\": 0,\r",
									"        \"wiki\": null,\r",
									"        \"value\": null,\r",
									"        \"questionType\": 3,\r",
									"        \"id\": null,\r",
									"        \"name\": \"2912\",\r",
									"        \"description\": null,\r",
									"        \"parentId\": 5,\r",
									"        \"scopeLevel\": \"Maps\",\r",
									"        \"createdat\": null,\r",
									"        \"updatedat\": null,\r",
									"        \"scopeLevelObj\": null\r",
									"    }\r",
									"};\r",
									"\r",
									"expectedJson.data.parentId = Number(pm.environment.get(\"mapId\"));\r",
									"pm.environment.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stem\": \"Unittesting case?\",\r\n    \"width\": 0,\r\n    \"height\": 0,\r\n    \"settings\": null,\r\n    \"feedback\": \"\",\r\n    \"prompt\": \"\",\r\n    \"showAnswer\": true,\r\n    \"showSubmit\": 1,\r\n    \"layoutType\": 0,\r\n    \"isPrivate\": 0,\r\n    \"order\": null,\r\n    \"responses\": [],\r\n    \"tryCount\": 0,\r\n    \"numTries\": 0,\r\n    \"disabled\": 0,\r\n    \"value\": null,\r\n    \"questionType\": 3,\r\n    \"name\": \"2912\",\r\n    \"description\": null,\r\n    \"parentId\": \"{{mapId}}\",\r\n    \"scopeLevel\": \"Maps\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/questions",
							"host": [
								"{{url}}"
							],
							"path": [
								"questions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get New Question",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"Id is expected\"] = jsonData.data.id == pm.environment.get(\"newId\");\r",
									"\r",
									"jsonData.data.createdat = null;\r",
									"jsonData.data.id = null;\r",
									"jsonData.data.wiki = null;\r",
									"jsonData.data.scopeLevelObj = null;\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"console.log(jsonData);\r",
									"console.log(expectedData);\r",
									"\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(expectedData) );\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"stem\": \"Unittesting case?\",\r",
									"        \"width\": 0,\r",
									"        \"height\": 0,\r",
									"        \"settings\": null,\r",
									"        \"feedback\": \"\",\r",
									"        \"prompt\": \"\",\r",
									"        \"showAnswer\": true,\r",
									"        \"showSubmit\": 1,\r",
									"        \"layoutType\": 0,\r",
									"        \"isPrivate\": 0,\r",
									"        \"order\": null,\r",
									"        \"responses\": [],\r",
									"        \"tryCount\": -1,\r",
									"        \"numTries\": -1,\r",
									"        \"disabled\": 0,\r",
									"        \"wiki\": null,\r",
									"        \"value\": null,\r",
									"        \"questionType\": 3,\r",
									"        \"id\": null,\r",
									"        \"name\": \"2912\",\r",
									"        \"description\": null,\r",
									"        \"parentId\": 5,\r",
									"        \"scopeLevel\": \"Maps\",\r",
									"        \"createdat\": null,\r",
									"        \"updatedat\": null,\r",
									"        \"scopeLevelObj\": null\r",
									"    }\r",
									"};\r",
									"expectedJson.data.parentId = Number(pm.environment.get(\"mapId\"));\r",
									"pm.environment.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/questions/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"questions",
								"{{newId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Question",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"fileContents\": null,\r",
									"        \"fileSize\": 0,\r",
									"        \"height\": null,\r",
									"        \"isSystem\": 0,\r",
									"        \"type\": null,\r",
									"        \"width\": null,\r",
									"        \"isPrivate\": 0,\r",
									"        \"isShared\": 1,\r",
									"        \"isEmbedded\": null,\r",
									"        \"args\": null,\r",
									"        \"copyright\": \"copyright\",\r",
									"        \"fileName\": \"settings.json\",\r",
									"        \"hAlign\": null,\r",
									"        \"heightType\": \"px\",\r",
									"        \"mime\": null,\r",
									"        \"originUrl\": null,\r",
									"        \"path\": \"settings.json\",\r",
									"        \"vAlign\": null,\r",
									"        \"widthType\": \"px\",\r",
									"        \"selectedFileName\": null,\r",
									"        \"isMediaResource\": true,\r",
									"        \"url\": null,\r",
									"        \"id\": null,\r",
									"        \"name\": \"settings.json\",\r",
									"        \"description\": \"description\",\r",
									"        \"parentId\": 5,\r",
									"        \"scopeLevel\": \"Maps\",\r",
									"        \"createdat\": null,\r",
									"        \"updatedat\": null,\r",
									"        \"scopeLevelObj\": {\r",
									"            \"id\": 5,\r",
									"            \"name\": \"1. Welcome to OLab4\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.globals.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/questions/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"questions",
								"{{newId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deleted Question",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 404\"] = responseCode.code === 404;\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"jsonData.data = null;\r",
									"\r",
									"console.log(jsonData);\r",
									"console.log(expectedData);\r",
									"\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(expectedData) );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 404,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": null\r",
									"};\r",
									"\r",
									"pm.environment.set(\"expectedJson\", expectedJson); \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/questions/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"questions",
								"{{newId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Question w/ Responses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"pm.environment.set(\"newId\", jsonData.data.id);\r",
									"pm.environment.set(\"newResponseId\", jsonData.data.responses[0].id);\r",
									"\r",
									"jsonData.data.createdat = null;\r",
									"jsonData.data.id = null;\r",
									"jsonData.data.wiki = null;\r",
									"jsonData.data.scopeLevelObj = null;\r",
									"jsonData.data.responses[0].id  = null;\r",
									"jsonData.data.responses[0].questionId  = null;\r",
									"jsonData.data.responses[0].scopeLevelObj = null;\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"console.log(jsonData);\r",
									"console.log(expectedData);\r",
									"\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(expectedData) );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"stem\": \"Unittesting case?\",\r",
									"        \"width\": 0,\r",
									"        \"height\": 0,\r",
									"        \"settings\": null,\r",
									"        \"feedback\": \"\",\r",
									"        \"prompt\": \"\",\r",
									"        \"showAnswer\": true,\r",
									"        \"showSubmit\": 1,\r",
									"        \"layoutType\": 0,\r",
									"        \"isPrivate\": 0,\r",
									"        \"order\": null,\r",
									"        \"responses\": [\r",
									"            {\r",
									"                \"response\": \"$5,000\",\r",
									"                \"feedback\": \"\",\r",
									"                \"isCorrect\": 1,\r",
									"                \"score\": 1,\r",
									"                \"from\": null,\r",
									"                \"to\": null,\r",
									"                \"order\": 0,\r",
									"                \"questionId\": null,\r",
									"                \"value\": false,\r",
									"                \"id\": null,\r",
									"                \"name\": \"120\",\r",
									"                \"description\": null,\r",
									"                \"parentId\": 0,\r",
									"                \"scopeLevel\": null,\r",
									"                \"createdat\": null,\r",
									"                \"updatedat\": null,\r",
									"                \"scopeLevelObj\": null\r",
									"            }\r",
									"        ],\r",
									"        \"tryCount\": -1,\r",
									"        \"numTries\": -1,\r",
									"        \"disabled\": 0,\r",
									"        \"wiki\": null,\r",
									"        \"value\": null,\r",
									"        \"questionType\": 3,\r",
									"        \"id\": null,\r",
									"        \"name\": \"2912\",\r",
									"        \"description\": null,\r",
									"        \"parentId\": null,\r",
									"        \"scopeLevel\": \"Maps\",\r",
									"        \"createdat\": null,\r",
									"        \"updatedat\": null,\r",
									"        \"scopeLevelObj\": null\r",
									"    }\r",
									"};\r",
									"\r",
									"expectedJson.data.parentId = Number(pm.environment.get(\"mapId\"));\r",
									"pm.environment.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stem\": \"Unittesting case?\",\r\n    \"width\": 0,\r\n    \"height\": 0,\r\n    \"settings\": null,\r\n    \"feedback\": \"\",\r\n    \"prompt\": \"\",\r\n    \"showAnswer\": true,\r\n    \"showSubmit\": 1,\r\n    \"layoutType\": 0,\r\n    \"isPrivate\": 0,\r\n    \"order\": null,\r\n    \"responses\": [\r\n        {\r\n            \"response\": \"$5,000\",\r\n            \"feedback\": \"\",\r\n            \"isCorrect\": 1,\r\n            \"score\": 1,\r\n            \"from\": null,\r\n            \"to\": null,\r\n            \"order\": 0,\r\n            \"value\": false,\r\n            \"name\": \"120\",\r\n            \"description\": null\r\n        }\r\n    ],\r\n    \"tryCount\": 0,\r\n    \"numTries\": 0,\r\n    \"disabled\": 0,\r\n    \"value\": null,\r\n    \"questionType\": 3,\r\n    \"name\": \"2912\",\r\n    \"description\": null,\r\n    \"parentId\": {{mapId}},\r\n    \"scopeLevel\": \"Maps\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/questions",
							"host": [
								"{{url}}"
							],
							"path": [
								"questions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get New Question w/ Responses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"Id is expected\"] = jsonData.data.id == pm.environment.get(\"newId\");\r",
									"tests[\"ResponseId is expected\"] = jsonData.data.responses[0].id == pm.environment.get(\"newResponseId\");\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"console.log(jsonData);\r",
									"console.log(expectedData);\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"stem\": \"Unittesting case?\",\r",
									"        \"width\": 0,\r",
									"        \"height\": 0,\r",
									"        \"settings\": null,\r",
									"        \"feedback\": \"\",\r",
									"        \"prompt\": \"\",\r",
									"        \"showAnswer\": true,\r",
									"        \"showSubmit\": 1,\r",
									"        \"layoutType\": 0,\r",
									"        \"isPrivate\": 0,\r",
									"        \"order\": null,\r",
									"        \"responses\": [],\r",
									"        \"tryCount\": -1,\r",
									"        \"numTries\": -1,\r",
									"        \"disabled\": 0,\r",
									"        \"wiki\": null,\r",
									"        \"value\": null,\r",
									"        \"questionType\": 3,\r",
									"        \"id\": null,\r",
									"        \"name\": \"2912\",\r",
									"        \"description\": null,\r",
									"        \"parentId\": 1644,\r",
									"        \"scopeLevel\": \"Maps\",\r",
									"        \"createdat\": null,\r",
									"        \"updatedat\": null,\r",
									"        \"scopeLevelObj\": null\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.environment.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/questions/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"questions",
								"{{newId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Question w/ Responses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"fileContents\": null,\r",
									"        \"fileSize\": 0,\r",
									"        \"height\": null,\r",
									"        \"isSystem\": 0,\r",
									"        \"type\": null,\r",
									"        \"width\": null,\r",
									"        \"isPrivate\": 0,\r",
									"        \"isShared\": 1,\r",
									"        \"isEmbedded\": null,\r",
									"        \"args\": null,\r",
									"        \"copyright\": \"copyright\",\r",
									"        \"fileName\": \"settings.json\",\r",
									"        \"hAlign\": null,\r",
									"        \"heightType\": \"px\",\r",
									"        \"mime\": null,\r",
									"        \"originUrl\": null,\r",
									"        \"path\": \"settings.json\",\r",
									"        \"vAlign\": null,\r",
									"        \"widthType\": \"px\",\r",
									"        \"selectedFileName\": null,\r",
									"        \"isMediaResource\": true,\r",
									"        \"url\": null,\r",
									"        \"id\": null,\r",
									"        \"name\": \"settings.json\",\r",
									"        \"description\": \"description\",\r",
									"        \"parentId\": 5,\r",
									"        \"scopeLevel\": \"Maps\",\r",
									"        \"createdat\": null,\r",
									"        \"updatedat\": null,\r",
									"        \"scopeLevelObj\": {\r",
									"            \"id\": 5,\r",
									"            \"name\": \"1. Welcome to OLab4\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.globals.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/questions/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"questions",
								"{{newId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deleted Question w/ Responses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 404\"] = responseCode.code === 404;\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"jsonData.data = null;\r",
									"\r",
									"console.log(jsonData);\r",
									"console.log(expectedData);\r",
									"\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(expectedData) );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 404,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": null\r",
									"};\r",
									"\r",
									"pm.environment.set(\"expectedJson\", expectedJson); \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/questions/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"questions",
								"{{newId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "File",
			"item": [
				{
					"name": "Upload File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"pm.environment.set(\"newId\", jsonData.data.id);\r",
									"\r",
									"jsonData.data.createdat = null;\r",
									"jsonData.data.id = null;\r",
									"jsonData.data.scopeLevelObj = null;\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"console.log(jsonData);\r",
									"console.log(expectedData);\r",
									"\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(expectedData) );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"fileSize\": 245,\r",
									"        \"height\": null,\r",
									"        \"isSystem\": 0,\r",
									"        \"type\": null,\r",
									"        \"width\": null,\r",
									"        \"isPrivate\": 0,\r",
									"        \"isShared\": 1,\r",
									"        \"isEmbedded\": null,\r",
									"        \"args\": null,\r",
									"        \"copyright\": \"copyright\",\r",
									"        \"fileName\": \"settings.json\",\r",
									"        \"hAlign\": null,\r",
									"        \"heightType\": \"px\",\r",
									"        \"mime\": \"application/json\",\r",
									"        \"originUrl\": null,        \r",
									"        \"path\": \"settings.json\",\r",
									"        \"vAlign\": null,\r",
									"        \"widthType\": \"px\",\r",
									"        \"selectedFileName\": null,\r",
									"        \"isMediaResource\": true,\r",
									"        \"url\": null,\r",
									"        \"id\": null,\r",
									"        \"name\": \"settings.json\",\r",
									"        \"description\": \"description\",\r",
									"        \"parentId\": 5,\r",
									"        \"scopeLevel\": \"Maps\",\r",
									"        \"createdat\": null,\r",
									"        \"updatedat\": null,\r",
									"        \"scopeLevelObj\": null\r",
									"    }\r",
									"}\r",
									"\r",
									"expectedJson.data.parentId = Number(pm.environment.get(\"mapId\"));\r",
									"pm.environment.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "file",
									"type": "file",
									"src": "settings.json"
								},
								{
									"key": "id",
									"value": "0",
									"type": "text"
								},
								{
									"key": "name",
									"value": "settings.json",
									"type": "text"
								},
								{
									"key": "description",
									"value": "description",
									"type": "text"
								},
								{
									"key": "copyright",
									"value": "copyright",
									"type": "text"
								},
								{
									"key": "parentId",
									"value": "{{mapId}}",
									"type": "text"
								},
								{
									"key": "scopeLevel",
									"value": "Maps",
									"type": "text"
								},
								{
									"key": "isMediaResource",
									"value": "true",
									"type": "text"
								},
								{
									"key": "selectedFileName",
									"value": "settings.json",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{url}}/files",
							"host": [
								"{{url}}"
							],
							"path": [
								"files"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get New File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"Id is expected\"] = jsonData.data.id == pm.environment.get(\"newId\");\r",
									"\r",
									"jsonData.data.createdat = null;\r",
									"jsonData.data.id = null;\r",
									"jsonData.data.parentId = null;\r",
									"jsonData.data.scopeLevelObj = null;\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"tests[\"Body is correct\"] = functions.compare(expectedData, jsonData);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"fileSize\": 245,\r",
									"        \"height\": null,\r",
									"        \"isSystem\": 0,\r",
									"        \"type\": null,\r",
									"        \"width\": null,\r",
									"        \"isPrivate\": 0,\r",
									"        \"isShared\": 1,\r",
									"        \"isEmbedded\": null,\r",
									"        \"args\": null,\r",
									"        \"copyright\": \"copyright\",\r",
									"        \"fileName\": \"settings.json\",\r",
									"        \"hAlign\": null,\r",
									"        \"heightType\": \"px\",\r",
									"        \"mime\": \"application/json\",\r",
									"        \"originUrl\": null,\r",
									"        \"path\": \"settings.json\",\r",
									"        \"vAlign\": null,\r",
									"        \"widthType\": \"px\",\r",
									"        \"selectedFileName\": null,\r",
									"        \"isMediaResource\": true,\r",
									"        \"url\": null,\r",
									"        \"id\": null,\r",
									"        \"name\": \"settings.json\",\r",
									"        \"description\": \"description\",\r",
									"        \"parentId\": null,\r",
									"        \"scopeLevel\": \"Maps\",\r",
									"        \"createdat\": null,\r",
									"        \"updatedat\": null,\r",
									"        \"scopeLevelObj\": null\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.environment.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/files/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"files",
								"{{newId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"fileContents\": null,\r",
									"        \"fileSize\": 0,\r",
									"        \"height\": null,\r",
									"        \"isSystem\": 0,\r",
									"        \"type\": null,\r",
									"        \"width\": null,\r",
									"        \"isPrivate\": 0,\r",
									"        \"isShared\": 1,\r",
									"        \"isEmbedded\": null,\r",
									"        \"args\": null,\r",
									"        \"copyright\": \"copyright\",\r",
									"        \"fileName\": \"settings.json\",\r",
									"        \"hAlign\": null,\r",
									"        \"heightType\": \"px\",\r",
									"        \"mime\": null,\r",
									"        \"originUrl\": null,\r",
									"        \"path\": \"settings.json\",\r",
									"        \"vAlign\": null,\r",
									"        \"widthType\": \"px\",\r",
									"        \"selectedFileName\": null,\r",
									"        \"isMediaResource\": true,\r",
									"        \"url\": null,\r",
									"        \"id\": null,\r",
									"        \"name\": \"settings.json\",\r",
									"        \"description\": \"description\",\r",
									"        \"parentId\": 5,\r",
									"        \"scopeLevel\": \"Maps\",\r",
									"        \"createdat\": null,\r",
									"        \"updatedat\": null,\r",
									"        \"scopeLevelObj\": {\r",
									"            \"id\": 5,\r",
									"            \"name\": \"1. Welcome to OLab4\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.globals.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/files/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"files",
								"{{newId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deleted File",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 404\"] = responseCode.code === 404;\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"jsonData.data = null;\r",
									"\r",
									"console.log(jsonData);\r",
									"console.log(expectedData);\r",
									"\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(expectedData) );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 404,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": null\r",
									"};\r",
									"\r",
									"pm.environment.set(\"expectedJson\", expectedJson); \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/files/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"files",
								"{{newId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Map",
			"item": [
				{
					"name": "Maps",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"Count is > 0\"] = jsonData.count > 0;"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"  \"count\": null,\r",
									"  \"remaining\": 0,\r",
									"  \"extended_status_code\": null,\r",
									"  \"message\": \"success\",\r",
									"  \"error_code\": 200,\r",
									"  \"diagnostics\": [],\r",
									"  \"data\": [\r",
									"        {\r",
									"            \"id\": 1643,\r",
									"            \"name\": \"(Note: This is the DEV server)\",\r",
									"            \"description\": \"<p>This is to remind authors that they are using the DEV server</p>\",\r",
									"            \"url\": null\r",
									"        }\r",
									"  ]\r",
									"};\r",
									"\r",
									"pm.globals.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/maps",
							"host": [
								"{{url}}"
							],
							"path": [
								"maps"
							]
						}
					},
					"response": []
				},
				{
					"name": "Map",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"jsonData.data.id = null;\r",
									"\r",
									"var expectedData = pm.globals.get(\"expectedJson\");\r",
									"tests[\"Body is correct\"] =  functions.compare(expectedData, jsonData);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"enabled\": true,\r",
									"        \"revisableAnswers\": false,\r",
									"        \"sendXapiStatements\": false,\r",
									"        \"showBar\": false,\r",
									"        \"showScore\": false,\r",
									"        \"timing\": false,\r",
									"        \"createdAt\": null,\r",
									"        \"updatedAt\": null,\r",
									"        \"rendererVersion\": null,\r",
									"        \"authorRights\": 0,\r",
									"        \"deltaTime\": 0,\r",
									"        \"reminderTime\": 0,\r",
									"        \"startScore\": 0,\r",
									"        \"threshold\": 0,\r",
									"        \"assignForumId\": null,\r",
									"        \"isTemplate\": 0,\r",
									"        \"abstract\": \"<p>This map contains an example of all the features in a labyrinth in OLab v4.6. Created to test out the <strong>Duplicate</strong> function or advanced <strong>Export</strong>.&nbsp;Note that the Export/Import format being used here extends beyond what is permitted by the ANSI/Medbiq MVP standard.&nbsp;</p>\\n<p>See Author notes about what needs to be included, that was not included in 'Export testing 2'. Has been updated since some of the duplicates were made. Some items in this map are intended to illustrate what is known to survive an Export and what is known to be lost. e.g. Embedded Relative Links (see [Internally referenced node]) and <strong>Imagemaps</strong>.&nbsp;</p>\\n<p>&nbsp;</p>\",\r",
									"        \"author\": null,\r",
									"        \"devNotes\": \"<p>**Authoring notes do not Import properly. They were Base64 encoded I think. They should have said this&hellip;</p>\\n<p>Has one of everything that we want to Export/Import between OLab3 servers. This exceeds what can be covered in the ANSI/MVP format.&nbsp;</p>\\n<p>Check to see if all the internal and external refs work properly.&nbsp;Has been updated since some of the duplicates were made so some of them will not be identical.&nbsp;</p>\",\r",
									"        \"feedback\": \"VGhpcyBpcyBnZW5lcmFsIGZlZWRiYWNrIGdpdmVuIHRvIGV2ZXJ5b25l\",\r",
									"        \"guid\": \"\",\r",
									"        \"keywords\": \"test\",\r",
									"        \"reminderMsg\": \"empty_reminder_msg\",\r",
									"        \"source\": \"\",\r",
									"        \"title\": null,\r",
									"        \"units\": \"\",\r",
									"        \"verification\": null,\r",
									"        \"sectionId\": 3,\r",
									"        \"securityId\": 3,\r",
									"        \"skinId\": 0,\r",
									"        \"sourceId\": 0,\r",
									"        \"typeId\": 5,\r",
									"        \"languageId\": 1,\r",
									"        \"reportNodeId\": null,\r",
									"        \"id\": null,\r",
									"        \"name\": \"IMPORT: Test: Duplicate and advanced export testing\",\r",
									"        \"description\": \"<p>This map contains an example of all the features in a labyrinth in OLab v4.6. Created to test out the <strong>Duplicate</strong> function or advanced <strong>Export</strong>.&nbsp;Note that the Export/Import format being used here extends beyond what is permitted by the ANSI/Medbiq MVP standard.&nbsp;</p>\\n<p>See Author notes about what needs to be included, that was not included in 'Export testing 2'. Has been updated since some of the duplicates were made. Some items in this map are intended to illustrate what is known to survive an Export and what is known to be lost. e.g. Embedded Relative Links (see [Internally referenced node]) and <strong>Imagemaps</strong>.&nbsp;</p>\\n<p>&nbsp;</p>\",\r",
									"        \"url\": null\r",
									"    }\r",
									"};\r",
									"pm.globals.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/maps/{{mapId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"maps",
								"{{mapId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Maps Links",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"jsonData.count = null;\r",
									"\r",
									"postman.setEnvironmentVariable(\"newNodeId\", jsonData.data[0].node_id_1);\r",
									"\r",
									"var expectedJson = pm.globals.get(\"expectedJson\").data[0];\r",
									"jsonData.data[0].map_id = null;\r",
									"jsonData.data[0].node_id_2 = null;\r",
									"jsonData.data[0].node_id_1 = null;\r",
									"jsonData.data[0].sourceId = null;\r",
									"jsonData.data[0].destinationId = null;\r",
									"\r",
									"tests[\"Body is correct\"] =  functions.compare(expectedJson, jsonData.data[0]);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"  \"count\": null,\r",
									"  \"remaining\": 0,\r",
									"  \"extended_status_code\": null,\r",
									"  \"message\": \"success\",\r",
									"  \"error_code\": 200,\r",
									"  \"diagnostics\": [],\r",
									"  \"data\": [\r",
									"        {\r",
									"            \"map_id\": null,\r",
									"            \"node_id_1\": null,\r",
									"            \"node_id_2\": null,\r",
									"            \"image_id\": null,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 1,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": null,\r",
									"            \"id\": null,\r",
									"            \"sourceId\": null,\r",
									"            \"destinationId\": null,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": null,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 18,\r",
									"            \"node_id_2\": 17,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 28,\r",
									"            \"sourceId\": 18,\r",
									"            \"destinationId\": 17,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 17,\r",
									"            \"node_id_2\": 19,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 29,\r",
									"            \"sourceId\": 17,\r",
									"            \"destinationId\": 19,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 19,\r",
									"            \"node_id_2\": 17,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 30,\r",
									"            \"sourceId\": 19,\r",
									"            \"destinationId\": 17,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 17,\r",
									"            \"node_id_2\": 20,\r",
									"            \"image_id\": null,\r",
									"            \"text\": \"\",\r",
									"            \"order\": null,\r",
									"            \"probability\": null,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": 8,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": null,\r",
									"            \"id\": 31,\r",
									"            \"sourceId\": 17,\r",
									"            \"destinationId\": 20,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 20,\r",
									"            \"node_id_2\": 17,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 32,\r",
									"            \"sourceId\": 20,\r",
									"            \"destinationId\": 17,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 19,\r",
									"            \"node_id_2\": 22,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 35,\r",
									"            \"sourceId\": 19,\r",
									"            \"destinationId\": 22,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 22,\r",
									"            \"node_id_2\": 19,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 36,\r",
									"            \"sourceId\": 22,\r",
									"            \"destinationId\": 19,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 20,\r",
									"            \"node_id_2\": 21,\r",
									"            \"image_id\": null,\r",
									"            \"text\": \"\",\r",
									"            \"order\": null,\r",
									"            \"probability\": null,\r",
									"            \"hidden\": true,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": null,\r",
									"            \"id\": 37,\r",
									"            \"sourceId\": 20,\r",
									"            \"destinationId\": 21,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 21,\r",
									"            \"node_id_2\": 20,\r",
									"            \"image_id\": null,\r",
									"            \"text\": \"\",\r",
									"            \"order\": null,\r",
									"            \"probability\": null,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": null,\r",
									"            \"id\": 38,\r",
									"            \"sourceId\": 21,\r",
									"            \"destinationId\": 20,\r",
									"            \"color\": \"#5300eb\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 20,\r",
									"            \"node_id_2\": 22,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 39,\r",
									"            \"sourceId\": 20,\r",
									"            \"destinationId\": 22,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 22,\r",
									"            \"node_id_2\": 20,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 40,\r",
									"            \"sourceId\": 22,\r",
									"            \"destinationId\": 20,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 21,\r",
									"            \"node_id_2\": 22,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 41,\r",
									"            \"sourceId\": 21,\r",
									"            \"destinationId\": 22,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 17,\r",
									"            \"node_id_2\": 4816,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 23448,\r",
									"            \"sourceId\": 17,\r",
									"            \"destinationId\": 4816,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 4816,\r",
									"            \"node_id_2\": 4815,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 23452,\r",
									"            \"sourceId\": 4816,\r",
									"            \"destinationId\": 4815,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 4815,\r",
									"            \"node_id_2\": 4816,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 23453,\r",
									"            \"sourceId\": 4815,\r",
									"            \"destinationId\": 4816,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 4816,\r",
									"            \"node_id_2\": 17,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 23454,\r",
									"            \"sourceId\": 4816,\r",
									"            \"destinationId\": 17,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 17,\r",
									"            \"node_id_2\": 4819,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 23457,\r",
									"            \"sourceId\": 17,\r",
									"            \"destinationId\": 4819,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 4819,\r",
									"            \"node_id_2\": 17,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 23458,\r",
									"            \"sourceId\": 4819,\r",
									"            \"destinationId\": 17,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 4819,\r",
									"            \"node_id_2\": 4815,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 23459,\r",
									"            \"sourceId\": 4819,\r",
									"            \"destinationId\": 4815,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 17,\r",
									"            \"node_id_2\": 4815,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 90601,\r",
									"            \"sourceId\": 17,\r",
									"            \"destinationId\": 4815,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 18,\r",
									"            \"node_id_2\": 4815,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 90602,\r",
									"            \"sourceId\": 18,\r",
									"            \"destinationId\": 4815,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 18,\r",
									"            \"node_id_2\": 19,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 90603,\r",
									"            \"sourceId\": 18,\r",
									"            \"destinationId\": 19,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 4815,\r",
									"            \"node_id_2\": 17,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 90604,\r",
									"            \"sourceId\": 4815,\r",
									"            \"destinationId\": 17,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 4815,\r",
									"            \"node_id_2\": 4819,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 90605,\r",
									"            \"sourceId\": 4815,\r",
									"            \"destinationId\": 4819,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 4815,\r",
									"            \"node_id_2\": 19,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 90606,\r",
									"            \"sourceId\": 4815,\r",
									"            \"destinationId\": 19,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 17,\r",
									"            \"node_id_2\": 28226,\r",
									"            \"image_id\": null,\r",
									"            \"text\": \"\",\r",
									"            \"order\": null,\r",
									"            \"probability\": null,\r",
									"            \"hidden\": true,\r",
									"            \"thickness\": 2,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": null,\r",
									"            \"id\": 94911,\r",
									"            \"sourceId\": 17,\r",
									"            \"destinationId\": 28226,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": null,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 28226,\r",
									"            \"node_id_2\": 17,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": null,\r",
									"            \"line_type\": null,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 97400,\r",
									"            \"sourceId\": 28226,\r",
									"            \"destinationId\": 17,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 22,\r",
									"            \"node_id_2\": 17,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": 2,\r",
									"            \"line_type\": 1,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 110542,\r",
									"            \"sourceId\": 22,\r",
									"            \"destinationId\": 17,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 17,\r",
									"            \"node_id_2\": 33146,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": 2,\r",
									"            \"line_type\": 1,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 110543,\r",
									"            \"sourceId\": 17,\r",
									"            \"destinationId\": 33146,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 33146,\r",
									"            \"node_id_2\": 17,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": 2,\r",
									"            \"line_type\": 1,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 110544,\r",
									"            \"sourceId\": 33146,\r",
									"            \"destinationId\": 17,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 33146,\r",
									"            \"node_id_2\": 28226,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": 2,\r",
									"            \"line_type\": 1,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 110545,\r",
									"            \"sourceId\": 33146,\r",
									"            \"destinationId\": 28226,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 28226,\r",
									"            \"node_id_2\": 33146,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": 2,\r",
									"            \"line_type\": 1,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 110546,\r",
									"            \"sourceId\": 28226,\r",
									"            \"destinationId\": 33146,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 33146,\r",
									"            \"node_id_2\": 21,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": 2,\r",
									"            \"line_type\": 1,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 110547,\r",
									"            \"sourceId\": 33146,\r",
									"            \"destinationId\": 21,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        },\r",
									"        {\r",
									"            \"map_id\": 5,\r",
									"            \"node_id_1\": 21,\r",
									"            \"node_id_2\": 33146,\r",
									"            \"image_id\": 0,\r",
									"            \"text\": \"\",\r",
									"            \"order\": 0,\r",
									"            \"probability\": 0,\r",
									"            \"hidden\": false,\r",
									"            \"thickness\": 2,\r",
									"            \"line_type\": 1,\r",
									"            \"follow_once\": 0,\r",
									"            \"id\": 110548,\r",
									"            \"sourceId\": 21,\r",
									"            \"destinationId\": 33146,\r",
									"            \"color\": \"#566e94\",\r",
									"            \"reverseId\": null,\r",
									"            \"linkText\": null,\r",
									"            \"destinationTitle\": null,\r",
									"            \"linkStyleId\": 5,\r",
									"            \"isHidden\": false\r",
									"        }\r",
									"    ]\r",
									"};\r",
									"\r",
									"pm.globals.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/maps/{{mapId}}/links",
							"host": [
								"{{url}}"
							],
							"path": [
								"maps",
								"{{mapId}}",
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "Map ScopedObjects",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"jsonData.data.files[0].createdat = null;\r",
									"jsonData.data.files[0].scopeLevelObj = null;\r",
									"\r",
									"tests[\"OriginUrl is correct\"] = jsonData.data.files[0].originUrl.includes(expectedData.data.originUrl);\r",
									"\r",
									"jsonData.data.files[0].originUrl = expectedData.data.originUrl;\r",
									"\r",
									"tests[\"Body is correct\"] = functions.compare(expectedData.data, jsonData.data.files[0]);\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"fileSize\": 25280,\r",
									"        \"height\": null,\r",
									"        \"isSystem\": 0,\r",
									"        \"type\": null,\r",
									"        \"width\": null,\r",
									"        \"isPrivate\": 0,\r",
									"        \"isShared\": 1,\r",
									"        \"isEmbedded\": null,\r",
									"        \"args\": null,\r",
									"        \"copyright\": \"\",\r",
									"        \"fileName\": \"RonAvatar.png\",\r",
									"        \"hAlign\": null,\r",
									"        \"heightType\": \"px\",\r",
									"        \"mime\": \"image/png\",\r",
									"        \"originUrl\": \"RonAvatar.png\",\r",
									"        \"path\": \"RonAvatar.png\",\r",
									"        \"vAlign\": null,\r",
									"        \"widthType\": \"px\",\r",
									"        \"selectedFileName\": null,\r",
									"        \"isMediaResource\": true,\r",
									"        \"url\": null,\r",
									"        \"id\": null,\r",
									"        \"name\": \"Test image of Ron's avatar\",\r",
									"        \"description\": \"Borrowed from Ron TT case for PNG as attached file\",\r",
									"        \"parentId\": null,\r",
									"        \"scopeLevel\": \"Maps\",\r",
									"        \"createdat\": null,\r",
									"        \"updatedat\": null,\r",
									"        \"scopeLevelObj\": null\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.environment.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/maps/{{mapId}}/scopedobjects",
							"host": [
								"{{url}}"
							],
							"path": [
								"maps",
								"{{mapId}}",
								"scopedobjects"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Map Nodes",
			"item": [
				{
					"name": "MapNodesGetDesigner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"Count is correct\"] = ( jsonData.data.length === jsonData.count );\r",
									"tests[\"Array count is correct\"] = ( jsonData.data.length === 27 );\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"enabled\": true,\r",
									"        \"revisableAnswers\": false,\r",
									"        \"sendXapiStatements\": true,\r",
									"        \"showBar\": false,\r",
									"        \"showScore\": false,\r",
									"        \"timing\": false,\r",
									"        \"createdAt\": null,\r",
									"        \"updatedAt\": null,\r",
									"        \"rendererVersion\": null,\r",
									"        \"authorRights\": 0,\r",
									"        \"deltaTime\": 0,\r",
									"        \"reminderTime\": 0,\r",
									"        \"startScore\": 0,\r",
									"        \"threshold\": 0,\r",
									"        \"assignForumId\": null,\r",
									"        \"isTemplate\": 0,\r",
									"        \"abstract\": \"<p>An open case for public consumption to demonstrate the basic capabilities of OLab4.</p>\",\r",
									"        \"author\": null,\r",
									"        \"devNotes\": \"\",\r",
									"        \"feedback\": \"\",\r",
									"        \"guid\": \"\",\r",
									"        \"keywords\": \"olab4\",\r",
									"        \"reminderMsg\": \"empty_reminder_msg\",\r",
									"        \"source\": \"\",\r",
									"        \"title\": null,\r",
									"        \"units\": \"\",\r",
									"        \"verification\": null,\r",
									"        \"sectionId\": 3,\r",
									"        \"securityId\": 1,\r",
									"        \"skinId\": 0,\r",
									"        \"sourceId\": 0,\r",
									"        \"typeId\": 10,\r",
									"        \"languageId\": null,\r",
									"        \"reportNodeId\": null,\r",
									"        \"id\": 5,\r",
									"        \"name\": \"1. Welcome to OLab4\",\r",
									"        \"description\": \"<p>An open case for public consumption to demonstrate the basic capabilities of OLab4.</p>\",\r",
									"        \"url\": null\r",
									"    }\r",
									"};\r",
									"pm.globals.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/designer/maps/{{mapId}}/nodes",
							"host": [
								"{{url}}"
							],
							"path": [
								"designer",
								"maps",
								"{{mapId}}",
								"nodes"
							]
						}
					},
					"response": []
				},
				{
					"name": "MapNodeGetDesigner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"var expectedLinkJson =             {\r",
									"    \"id\": null,\r",
									"    \"sourceId\": null,\r",
									"    \"destinationId\": null,\r",
									"    \"color\": \"#566e94\",\r",
									"    \"reverseId\": null,\r",
									"    \"linkText\": \"Images and other media\",\r",
									"    \"destinationTitle\": \"Images and other media\",\r",
									"    \"linkStyleId\": 5,\r",
									"    \"isHidden\": false\r",
									"};\r",
									"\r",
									"var linkData = jsonData.data.links[0];\r",
									"linkData.id = null;\r",
									"linkData.sourceId = null;\r",
									"linkData.destinationId = null;\r",
									"\r",
									"console.log(linkData);\r",
									"console.log(expectedLinkJson);\r",
									"console.log(jsonData.data.links.length);\r",
									"\r",
									"tests[\"Link[0] is correct\"] = ( JSON.stringify(linkData) === JSON.stringify(expectedLinkJson) );\r",
									"\r",
									"tests[\"Count is correct\"] = ( jsonData.data.length === jsonData.count );\r",
									"tests[\"Array count is correct\"] = ( jsonData.data.links.length === 9 );\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson =             {\r",
									"    \"id\": 31,\r",
									"    \"sourceId\": 17,\r",
									"    \"destinationId\": 20,\r",
									"    \"color\": \"#566e94\",\r",
									"    \"reverseId\": null,\r",
									"    \"linkText\": \"Images and other media\",\r",
									"    \"destinationTitle\": \"Images and other media\",\r",
									"    \"linkStyleId\": 5,\r",
									"    \"isHidden\": false\r",
									"};\r",
									"\r",
									"expectedJson.id = null;\r",
									"expectedJson.sourceId = null;\r",
									"expectedJson.destinationId = null;\r",
									"\r",
									"pm.globals.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/designer/maps/{{mapId}}/node/{{newNodeId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"designer",
								"maps",
								"{{mapId}}",
								"node",
								"{{newNodeId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "MapNodeLinkPostDesigner",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"pm.environment.set(\"newId\", jsonData.data.id);\r",
									"\r",
									"jsonData.data.createdat = null;\r",
									"jsonData.data.id = null;\r",
									"jsonData.data.wiki = null;\r",
									"jsonData.data.scopeLevelObj = null;\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"console.log(jsonData);\r",
									"console.log(expectedData);\r",
									"\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(expectedData) );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"stem\": \"Unittesting case?\",\r",
									"        \"width\": 0,\r",
									"        \"height\": 0,\r",
									"        \"settings\": null,\r",
									"        \"feedback\": \"\",\r",
									"        \"prompt\": \"\",\r",
									"        \"showAnswer\": true,\r",
									"        \"showSubmit\": 1,\r",
									"        \"layoutType\": 0,\r",
									"        \"isPrivate\": 0,\r",
									"        \"order\": null,\r",
									"        \"responses\": [],\r",
									"        \"tryCount\": -1,\r",
									"        \"numTries\": -1,\r",
									"        \"disabled\": 0,\r",
									"        \"wiki\": null,\r",
									"        \"value\": null,\r",
									"        \"questionType\": 3,\r",
									"        \"id\": null,\r",
									"        \"name\": \"2912\",\r",
									"        \"description\": null,\r",
									"        \"parentId\": 5,\r",
									"        \"scopeLevel\": \"Maps\",\r",
									"        \"createdat\": null,\r",
									"        \"updatedat\": null,\r",
									"        \"scopeLevelObj\": null\r",
									"    }\r",
									"};\r",
									"\r",
									"expectedJson.data.parentId = Number(pm.environment.get(\"mapId\"));\r",
									"pm.environment.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"stem\": \"Unittesting case?\",\r\n    \"width\": 0,\r\n    \"height\": 0,\r\n    \"settings\": null,\r\n    \"feedback\": \"\",\r\n    \"prompt\": \"\",\r\n    \"showAnswer\": true,\r\n    \"showSubmit\": 1,\r\n    \"layoutType\": 0,\r\n    \"isPrivate\": 0,\r\n    \"order\": null,\r\n    \"responses\": [],\r\n    \"tryCount\": 0,\r\n    \"numTries\": 0,\r\n    \"disabled\": 0,\r\n    \"value\": null,\r\n    \"questionType\": 3,\r\n    \"name\": \"2912\",\r\n    \"description\": null,\r\n    \"parentId\": \"{{mapId}}\",\r\n    \"scopeLevel\": \"Maps\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/designer/maps/{{mapId}}/nodes/",
							"host": [
								"{{url}}"
							],
							"path": [
								"designer",
								"maps",
								"{{mapId}}",
								"nodes",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Template",
			"item": [
				{
					"name": "Link Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(pm.globals.get(\"expectedJson\")) );\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"text\": \"\",\r",
									"        \"hidden\": 0,\r",
									"        \"order\": 0,\r",
									"        \"probability\": 0,\r",
									"        \"thicknees\": 2,\r",
									"        \"color\": \"#566e94\",\r",
									"        \"lineStyleId\": 5,\r",
									"        \"linetype\": 1,\r",
									"        \"followOnce\": 0\r",
									"    }\r",
									"};\r",
									"pm.globals.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/templates/links",
							"host": [
								"{{url}}"
							],
							"path": [
								"templates",
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "Node Template",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(pm.globals.get(\"expectedJson\")) );\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"title\": \"New Node\",\r",
									"        \"text\": \"<b>New node text</b>\",\r",
									"        \"x\": 0.0,\r",
									"        \"y\": 0.0,\r",
									"        \"locked\": 0,\r",
									"        \"collapsed\": 0,\r",
									"        \"height\": 160,\r",
									"        \"width\": 300,\r",
									"        \"probability\": 0,\r",
									"        \"info\": \"\",\r",
									"        \"annotation\": \"\",\r",
									"        \"linkStyleId\": 5,\r",
									"        \"linkTypeId\": 1,\r",
									"        \"typeId\": 2,\r",
									"        \"isPrivate\": 0,\r",
									"        \"color\": \"#566e94\",\r",
									"        \"visitOnce\": 0,\r",
									"        \"priorityId\": 1,\r",
									"        \"isEnd\": 0\r",
									"    }\r",
									"};\r",
									"pm.globals.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/templates/nodes",
							"host": [
								"{{url}}"
							],
							"path": [
								"templates",
								"nodes"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Counters",
			"item": [
				{
					"name": "Get All",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"Got >0 objects\"] = jsonData.count > 0;\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/counters",
							"host": [
								"{{url}}"
							],
							"path": [
								"counters"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Counters",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"Coun t> 0\"] = jsonData.count === jsonData.data.length;\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"stem\": \"Unittesting case?\",\r",
									"        \"width\": 0,\r",
									"        \"height\": 0,\r",
									"        \"settings\": null,\r",
									"        \"feedback\": \"\",\r",
									"        \"prompt\": \"\",\r",
									"        \"showAnswer\": true,\r",
									"        \"showSubmit\": 1,\r",
									"        \"layoutType\": 0,\r",
									"        \"isPrivate\": 0,\r",
									"        \"order\": null,\r",
									"        \"responses\": [],\r",
									"        \"tryCount\": -1,\r",
									"        \"numTries\": -1,\r",
									"        \"disabled\": 0,\r",
									"        \"wiki\": null,\r",
									"        \"value\": null,\r",
									"        \"questionType\": 3,\r",
									"        \"id\": null,\r",
									"        \"name\": \"2912\",\r",
									"        \"description\": null,\r",
									"        \"parentId\": 1644,\r",
									"        \"scopeLevel\": \"Maps\",\r",
									"        \"createdat\": null,\r",
									"        \"updatedat\": null,\r",
									"        \"scopeLevelObj\": null\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.environment.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/counters",
							"host": [
								"{{url}}"
							],
							"path": [
								"counters"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Counter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"pm.environment.set(\"newId\", jsonData.data.id);\r",
									"\r",
									"jsonData.data.createdat = null;\r",
									"jsonData.data.id = null;\r",
									"jsonData.data.scopeLevelObj = null;\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"console.log(jsonData);\r",
									"console.log(expectedData);\r",
									"\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(expectedData) );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"startValue\": \"unittest\",\r",
									"        \"iconId\": null,\r",
									"        \"prefix\": null,\r",
									"        \"suffix\": null,\r",
									"        \"visible\": false,\r",
									"        \"outOf\": null,\r",
									"        \"status\": 0,\r",
									"        \"value\": \"unittest\",\r",
									"        \"isSystem\": null,\r",
									"        \"id\": null,\r",
									"        \"name\": \"unittest\",\r",
									"        \"description\": \"unittest\",\r",
									"        \"parentId\": 5,\r",
									"        \"scopeLevel\": \"Maps\",\r",
									"        \"createdat\": null,\r",
									"        \"updatedat\": null,\r",
									"        \"scopeLevelObj\": null\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.environment.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"unittest\",\r\n    \"description\": \"unittest\",\r\n    \"scopeLevel\": \"Maps\",\r\n    \"visible\": 0,\r\n    \"status\": 0,\r\n    \"startValue\": \"unittest\",\r\n    \"scopeLevelObj\": {\r\n        \"id\": 5,\r\n        \"name\": \"1. Welcome to OLab4\",\r\n        \"description\": \"<p>An open case for public consumption to demonstrate the basic capabilities of OLab4.</p>\",\r\n        \"url\": null\r\n    },\r\n    \"parentId\": 5\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/counters",
							"host": [
								"{{url}}"
							],
							"path": [
								"counters"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get New Counter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"Id is expected\"] = jsonData.data.id == pm.environment.get(\"newId\");\r",
									"\r",
									"jsonData.data.createdat = null;\r",
									"jsonData.data.id = null;\r",
									"jsonData.data.scopeLevelObj = null;\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"console.log(jsonData);\r",
									"console.log(expectedData);\r",
									"\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(expectedData) );\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"startValue\": \"unittest\",\r",
									"        \"iconId\": null,\r",
									"        \"prefix\": null,\r",
									"        \"suffix\": null,\r",
									"        \"visible\": false,\r",
									"        \"outOf\": null,\r",
									"        \"status\": 0,\r",
									"        \"value\": \"unittest\",\r",
									"        \"isSystem\": null,\r",
									"        \"id\": null,\r",
									"        \"name\": \"unittest\",\r",
									"        \"description\": \"unittest\",\r",
									"        \"parentId\": 5,\r",
									"        \"scopeLevel\": \"Maps\",\r",
									"        \"createdat\": null,\r",
									"        \"updatedat\": null,\r",
									"        \"scopeLevelObj\": null\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.environment.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/counters/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"counters",
								"{{newId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Put Counter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"startValue\": \"unittest 2\",\r",
									"        \"iconId\": null,\r",
									"        \"prefix\": null,\r",
									"        \"suffix\": null,\r",
									"        \"visible\": false,\r",
									"        \"outOf\": null,\r",
									"        \"status\": 0,\r",
									"        \"value\": \"unittest 2\",\r",
									"        \"isSystem\": null,\r",
									"        \"id\": null,\r",
									"        \"name\": \"unittest 2\",\r",
									"        \"description\": \"unittest 2\",\r",
									"        \"parentId\": 5,\r",
									"        \"scopeLevel\": \"Maps\",\r",
									"        \"createdat\": null,\r",
									"        \"updatedat\": null,\r",
									"        \"scopeLevelObj\": {\r",
									"            \"id\": 5,\r",
									"            \"name\": \"1. Welcome to OLab4\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"expectedJson.id = pm.environment.get(\"newId\");\r",
									"\r",
									"pm.environment.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"startValue\": \"unittest 2\",\r\n    \"iconId\": null,\r\n    \"prefix\": null,\r\n    \"suffix\": null,\r\n    \"visible\": false,\r\n    \"outOf\": null,\r\n    \"status\": 0,\r\n    \"value\": \"unittest 2\",\r\n    \"isSystem\": null,\r\n    \"id\": \"{{newId}}\",\r\n    \"name\": \"unittest 2\",\r\n    \"description\": \"unittest 2\",\r\n    \"parentId\": 5,\r\n    \"scopeLevel\": \"Maps\",\r\n    \"createdat\": \"2023-11-21T14:34:28\",\r\n    \"updatedat\": null,\r\n    \"scopeLevelObj\": {\r\n        \"id\": 5,\r\n        \"name\": \"1. Welcome to OLab4\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/counters/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"counters",
								"{{newId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Edited Counter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"Id is expected\"] = jsonData.data.id == pm.environment.get(\"newId\");\r",
									"\r",
									"jsonData.data.createdat = null;\r",
									"jsonData.data.updatedat = null;\r",
									"jsonData.data.id = null;\r",
									"jsonData.data.scopeLevelObj = null;\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"console.log(jsonData);\r",
									"console.log(expectedData);\r",
									"\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(expectedData) );\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"startValue\": \"unittest 2\",\r",
									"        \"iconId\": null,\r",
									"        \"prefix\": null,\r",
									"        \"suffix\": null,\r",
									"        \"visible\": false,\r",
									"        \"outOf\": null,\r",
									"        \"status\": 0,\r",
									"        \"value\": \"unittest 2\",\r",
									"        \"isSystem\": null,\r",
									"        \"id\": null,\r",
									"        \"name\": \"unittest 2\",\r",
									"        \"description\": \"unittest 2\",\r",
									"        \"parentId\": 5,\r",
									"        \"scopeLevel\": \"Maps\",\r",
									"        \"createdat\": null,\r",
									"        \"updatedat\": null,\r",
									"        \"scopeLevelObj\": null\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.environment.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/counters/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"counters",
								"{{newId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Counter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"fileContents\": null,\r",
									"        \"fileSize\": 0,\r",
									"        \"height\": null,\r",
									"        \"isSystem\": 0,\r",
									"        \"type\": null,\r",
									"        \"width\": null,\r",
									"        \"isPrivate\": 0,\r",
									"        \"isShared\": 1,\r",
									"        \"isEmbedded\": null,\r",
									"        \"args\": null,\r",
									"        \"copyright\": \"copyright\",\r",
									"        \"fileName\": \"settings.json\",\r",
									"        \"hAlign\": null,\r",
									"        \"heightType\": \"px\",\r",
									"        \"mime\": null,\r",
									"        \"originUrl\": null,\r",
									"        \"path\": \"settings.json\",\r",
									"        \"vAlign\": null,\r",
									"        \"widthType\": \"px\",\r",
									"        \"selectedFileName\": null,\r",
									"        \"isMediaResource\": true,\r",
									"        \"url\": null,\r",
									"        \"id\": null,\r",
									"        \"name\": \"settings.json\",\r",
									"        \"description\": \"description\",\r",
									"        \"parentId\": 5,\r",
									"        \"scopeLevel\": \"Maps\",\r",
									"        \"createdat\": null,\r",
									"        \"updatedat\": null,\r",
									"        \"scopeLevelObj\": {\r",
									"            \"id\": 5,\r",
									"            \"name\": \"1. Welcome to OLab4\"\r",
									"        }\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.globals.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/counters/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"counters",
								"{{newId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deleted Counter",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 404\"] = responseCode.code === 404;\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"jsonData.data = null;\r",
									"\r",
									"console.log(jsonData);\r",
									"console.log(expectedData);\r",
									"\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(expectedData) );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 404,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": null\r",
									"};\r",
									"\r",
									"pm.environment.set(\"expectedJson\", expectedJson); \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/counters/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"counters",
								"{{newId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Constants",
			"item": [
				{
					"name": "Get Constants",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"Got >0 objects\"] = jsonData.count > 0;\r",
									"postman.setEnvironmentVariable(\"initial_object_count\", jsonData.data.count);\r",
									"postman.setEnvironmentVariable(\"skip_count\", jsonData.data.count - 2);\r",
									"postman.setEnvironmentVariable(\"first_object\", jsonData.data[0].id);\r",
									"postman.setEnvironmentVariable(\"last_object\", jsonData.data[jsonData.count-1].id);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/constants",
							"host": [
								"{{url}}"
							],
							"path": [
								"constants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Constants Paged",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"Got 1 objects\"] = jsonData.count === 1;\r",
									"tests[\"Got 1st object\"] = jsonData.data[0].id == pm.environment.get(\"first_object\");\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/constants?skip=0&take=1",
							"host": [
								"{{url}}"
							],
							"path": [
								"constants"
							],
							"query": [
								{
									"key": "skip",
									"value": "0"
								},
								{
									"key": "take",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Constant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"pm.environment.set(\"newId\", jsonData.data.id);\r",
									"\r",
									"jsonData.data.createdat = null;\r",
									"jsonData.data.id = null;\r",
									"jsonData.data.scopeLevelObj = null;\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"console.log(jsonData);\r",
									"console.log(expectedData);\r",
									"\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(expectedData) );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"value\": \"unittest\",\r",
									"        \"isSystem\": null,\r",
									"        \"id\": null,\r",
									"        \"name\": \"unittest\",\r",
									"        \"description\": \"unittest\",\r",
									"        \"parentId\": 1644,\r",
									"        \"scopeLevel\": \"Maps\",\r",
									"        \"createdat\": null,\r",
									"        \"updatedat\": null,\r",
									"        \"scopeLevelObj\": null\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.environment.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"value\": \"unittest\",\r\n    \"isSystem\": null,\r\n    \"name\": \"unittest\",\r\n    \"description\": \"unittest\",\r\n    \"parentId\": 1644,\r\n    \"scopeLevel\": \"Maps\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/constants",
							"host": [
								"{{url}}"
							],
							"path": [
								"constants"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get New Constant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"Id is expected\"] = jsonData.data.id == pm.environment.get(\"newId\");\r",
									"\r",
									"jsonData.data.createdat = null;\r",
									"jsonData.data.id = null;\r",
									"jsonData.data.scopeLevelObj = null;\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"console.log(jsonData);\r",
									"console.log(expectedData);\r",
									"\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(expectedData) );\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/constants/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"constants",
								"{{newId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Edit Constant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"name\": \"unittest 2\",\r\n    \"description\": \"unittest 2\",\r\n    \"value\": \"unittest 2\",\r\n    \"scopeLevel\": \"Maps\",\r\n    \"id\": \"{{newId}}\",\r\n    \"parentId\": 1644,\r\n    \"isSystem\": null,\r\n    \"scopeLevelObj\": {\r\n        \"id\": 1644\r\n    },\r\n    \"isDetailsFetching\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/constants/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"constants",
								"{{newId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Edit Constant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"Id is expected\"] = jsonData.data.id == pm.environment.get(\"newId\");\r",
									"\r",
									"jsonData.data.createdat = null;\r",
									"jsonData.data.updatedat = null;\r",
									"jsonData.data.id = null;\r",
									"jsonData.data.scopeLevelObj = null;\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"console.log(jsonData);\r",
									"console.log(expectedData);\r",
									"\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(expectedData) );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"value\": \"unittest 2\",\r",
									"        \"isSystem\": null,\r",
									"        \"id\": null,\r",
									"        \"name\": \"unittest 2\",\r",
									"        \"description\": \"unittest 2\",\r",
									"        \"parentId\": 1644,\r",
									"        \"scopeLevel\": \"Maps\",\r",
									"        \"createdat\": null,\r",
									"        \"updatedat\": null,\r",
									"        \"scopeLevelObj\": null\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.environment.set(\"expectedJson\", expectedJson); \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/constants/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"constants",
								"{{newId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Constant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/constants/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"constants",
								"{{newId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deleted Constant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 404\"] = responseCode.code === 404;\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"jsonData.data = null;\r",
									"\r",
									"console.log(jsonData);\r",
									"console.log(expectedData);\r",
									"\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(expectedData) );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 404,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": null\r",
									"};\r",
									"\r",
									"pm.environment.set(\"expectedJson\", expectedJson); \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/constants/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"constants",
								"{{newId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Links",
			"item": [
				{
					"name": "Get All Initial",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"Got >0 objects\"] = jsonData.count > 0;\r",
									"postman.setEnvironmentVariable(\"source_node_id\", jsonData.data[0].node_id_1);\r",
									"postman.setEnvironmentVariable(\"destination_node_id\", jsonData.data[jsonData.data.length - 1].node_id_1);\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/maps/{{mapId}}/links",
							"host": [
								"{{url}}"
							],
							"path": [
								"maps",
								"{{mapId}}",
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post Link",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"\r",
									"pm.environment.set(\"newId\", jsonData.data.id);\r",
									"\r",
									"jsonData.data.id = null;\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"console.log(jsonData);\r",
									"console.log(expectedData);\r",
									"\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(expectedData) );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"id\": null\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.environment.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"destinationId\": \"{{destination_node_id}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/designer/maps/{{mapId}}/nodes/{{source_node_id}}/links",
							"host": [
								"{{url}}"
							],
							"path": [
								"designer",
								"maps",
								"{{mapId}}",
								"nodes",
								"{{source_node_id}}",
								"links"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get New Link",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
									"tests[\"Id is expected\"] = jsonData.data.id == pm.environment.get(\"newId\");\r",
									"\r",
									"jsonData.data.id = null;\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"console.log(jsonData);\r",
									"console.log(expectedData);\r",
									"\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(expectedData) );\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 200,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": {\r",
									"        \"id\": null,\r",
									"        \"sourceId\": 17,\r",
									"        \"destinationId\": 17,\r",
									"        \"color\": \"#566e94\",\r",
									"        \"reverseId\": null,\r",
									"        \"linkText\": \"\",\r",
									"        \"destinationTitle\": null,\r",
									"        \"linkStyleId\": 5,\r",
									"        \"isHidden\": false\r",
									"    }\r",
									"};\r",
									"\r",
									"pm.environment.set(\"expectedJson\", expectedJson); "
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/designer/maps/{{mapId}}/nodes/{{source_node_id}}/links/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"designer",
								"maps",
								"{{mapId}}",
								"nodes",
								"{{source_node_id}}",
								"links",
								"{{newId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Link",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status code is 204\"] = responseCode.code === 204;\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/designer/maps/{{mapId}}/nodes/{{source_node_id}}/links/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"designer",
								"maps",
								"{{mapId}}",
								"nodes",
								"{{source_node_id}}",
								"links",
								"{{newId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deleted Link",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = JSON.parse(responseBody);\r",
									"tests[\"Status code is 404\"] = responseCode.code === 404;\r",
									"\r",
									"var expectedData = pm.environment.get(\"expectedJson\");\r",
									"\r",
									"jsonData.data = null;\r",
									"\r",
									"console.log(jsonData);\r",
									"console.log(expectedData);\r",
									"\r",
									"tests[\"Body is correct\"] = ( JSON.stringify(jsonData) === JSON.stringify(expectedData) );"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var expectedJson = {\r",
									"    \"extended_status_code\": null,\r",
									"    \"message\": \"success\",\r",
									"    \"error_code\": 404,\r",
									"    \"diagnostics\": [],\r",
									"    \"data\": null\r",
									"};\r",
									"\r",
									"pm.environment.set(\"expectedJson\", expectedJson); \r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{jwt_token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/designer/maps/{{mapId}}/nodes/{{source_node_id}}/links/{{newId}}",
							"host": [
								"{{url}}"
							],
							"path": [
								"designer",
								"maps",
								"{{mapId}}",
								"nodes",
								"{{source_node_id}}",
								"links",
								"{{newId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Delete Test User",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var jsonData = JSON.parse(responseBody);\r",
							"postman.setEnvironmentVariable(\"loginuser\", jsonData.data[0].username);\r",
							"postman.setEnvironmentVariable(\"loginpassword\", jsonData.data[0].password);\r",
							"tests[\"Status code is 200\"] = responseCode.code === 200;\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{jwt_token}}",
							"type": "string"
						}
					]
				},
				"method": "POST",
				"header": [
					{
						"key": "Content-",
						"value": "application/json;charset=UTF-8",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "[\r\n    {\r\n        \"UserName\": \"{{loginuser}}\"\r\n    }\r\n]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/auth/deleteuser",
					"host": [
						"{{url}}"
					],
					"path": [
						"auth",
						"deleteuser"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"functions = {",
					"    compare: function compare( arg1, arg2 ) {",
					"",
					"        arg1.id = null;",
					"        arg2.id = null;",
					"        arg1.parentId = null;",
					"        arg2.parentId = null;",
					"        arg1.createdat = null;",
					"        arg2.createdat = null;",
					"        arg1.updatedat = null;",
					"        arg2.updatedat = null;",
					"        arg1.createdAt = null;",
					"        arg2.createdAt = null;",
					"        arg1.updatedAt = null;",
					"        arg2.updatedAt = null;",
					"",
					"        console.log(`${JSON.stringify(arg1)}`);",
					"        console.log(`${JSON.stringify(arg2)}`);        ",
					"        ",
					"        return JSON.stringify(arg1) === JSON.stringify(arg2);",
					"    }",
					"};",
					"",
					"postman.setEnvironmentVariable(\"functions\", functions);",
					"",
					"var today  = new Date();",
					"var prefix = today.toLocaleString(\"en-US\");",
					"postman.setEnvironmentVariable(\"testuser\", prefix);",
					"postman.setEnvironmentVariable(\"testemail\", `${prefix}@gmail.com`);",
					"postman.setEnvironmentVariable(\"testnickname\", `${prefix} test user`);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}